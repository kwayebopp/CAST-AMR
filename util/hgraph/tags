!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
COMMA	./amr_graph_description_parser.py	/^    COMMA = "COMMA"$/;"	v	class:LexTypes
COMMA	./graph_description_parser.py	/^    COMMA = "COMMA"$/;"	v	class:LexTypes
DerivationException	./hgraph.py	/^from common.exceptions import DerivationException$/;"	i
EDGELABEL	./amr_graph_description_parser.py	/^    EDGELABEL = "EDGELABEL"$/;"	v	class:LexTypes
EDGELABEL	./graph_description_parser.py	/^    EDGELABEL = "EDGELABEL"$/;"	v	class:LexTypes
EQUALS	./graph_description_parser.py	/^    EQUALS= "EQUALS"$/;"	v	class:LexTypes
GraphDescriptionParser	./amr_graph_description_parser.py	/^class GraphDescriptionParser(object):$/;"	c
GraphDescriptionParser	./graph_description_parser.py	/^class GraphDescriptionParser(object):$/;"	c
GraphDescriptionParser	./hgraph.py	/^            from graph_description_parser import GraphDescriptionParser, LexerError, ParserError$/;"	i
Hgraph	./amr_corpus_reader.py	/^from hgraph import Hgraph$/;"	i
Hgraph	./amr_graph_description_parser.py	/^from hgraph import Hgraph, SpecialValue, StrLiteral, Quantity, Literal, NonterminalLabel$/;"	i
Hgraph	./graph_description_parser.py	/^from hgraph import Hgraph, SpecialValue, StrLiteral, Quantity, Literal$/;"	i
Hgraph	./hgraph.py	/^class Hgraph(defaultdict):$/;"	c
Hgraph	./make_one_amr_per_line.py	/^from hgraph import Hgraph$/;"	i
Hgraph	./new_smatch.py	/^from hgraph import Hgraph$/;"	i
IDENTIFIER	./amr_graph_description_parser.py	/^    IDENTIFIER = "IDENTIFIER"$/;"	v	class:LexTypes
IDENTIFIER	./graph_description_parser.py	/^    IDENTIFIER = "IDENTIFIER"$/;"	v	class:LexTypes
LITERAL	./amr_graph_description_parser.py	/^    LITERAL =  "LITERAL"$/;"	v	class:LexTypes
LITERAL	./graph_description_parser.py	/^    LITERAL =  "LITERAL"$/;"	v	class:LexTypes
LOG	./log.py	/^LOG = {info, err, warn, chatter}$/;"	v
LPAR	./amr_graph_description_parser.py	/^    LPAR = "LPAR"$/;"	v	class:LexTypes
LPAR	./graph_description_parser.py	/^    LPAR = "LPAR"$/;"	v	class:LexTypes
LexTypes	./amr_graph_description_parser.py	/^class LexTypes:$/;"	c
LexTypes	./graph_description_parser.py	/^class LexTypes:$/;"	c
Lexer	./amr_graph_description_parser.py	/^class Lexer(object):$/;"	c
Lexer	./graph_description_parser.py	/^class Lexer(object):$/;"	c
LexerError	./amr_graph_description_parser.py	/^class LexerError(Exception):$/;"	c
LexerError	./graph_description_parser.py	/^from common.exceptions import LexerError, ParserError$/;"	i
LexerError	./hgraph.py	/^            from graph_description_parser import GraphDescriptionParser, LexerError, ParserError$/;"	i
ListMap	./hgraph.py	/^class ListMap(defaultdict):$/;"	c
Literal	./amr_graph_description_parser.py	/^from hgraph import Hgraph, SpecialValue, StrLiteral, Quantity, Literal, NonterminalLabel$/;"	i
Literal	./graph_description_parser.py	/^from hgraph import Hgraph, SpecialValue, StrLiteral, Quantity, Literal$/;"	i
Literal	./hgraph.py	/^class Literal(str):$/;"	c
NODE	./graph_description_parser.py	/^    NODE= "NODE"$/;"	v	class:LexTypes
NonterminalLabel	./amr_graph_description_parser.py	/^from hgraph import Hgraph, SpecialValue, StrLiteral, Quantity, Literal, NonterminalLabel$/;"	i
NonterminalLabel	./graph_description_parser.py	/^from common.cfg import NonterminalLabel$/;"	i
NonterminalLabel	./hgraph.py	/^from common.cfg import NonterminalLabel$/;"	i
OptionGroup	./new_smatch.py	/^from optparse import OptionParser, OptionGroup$/;"	i
OptionParser	./new_smatch.py	/^from optparse import OptionParser, OptionGroup$/;"	i
ParserError	./amr_graph_description_parser.py	/^class ParserError(Exception):$/;"	c
ParserError	./graph_description_parser.py	/^from common.exceptions import LexerError, ParserError$/;"	i
ParserError	./hgraph.py	/^            from graph_description_parser import GraphDescriptionParser, LexerError, ParserError$/;"	i
QUANTITY	./amr_graph_description_parser.py	/^    QUANTITY = "QUANTITY"$/;"	v	class:LexTypes
QUANTITY	./graph_description_parser.py	/^    QUANTITY = "QUANTITY"$/;"	v	class:LexTypes
Quantity	./amr_graph_description_parser.py	/^from hgraph import Hgraph, SpecialValue, StrLiteral, Quantity, Literal, NonterminalLabel$/;"	i
Quantity	./graph_description_parser.py	/^from hgraph import Hgraph, SpecialValue, StrLiteral, Quantity, Literal$/;"	i
Quantity	./hgraph.py	/^class Quantity(str):$/;"	c
RPAR	./amr_graph_description_parser.py	/^    RPAR = "RPAR"$/;"	v	class:LexTypes
RPAR	./graph_description_parser.py	/^    RPAR = "RPAR"$/;"	v	class:LexTypes
SLASH	./amr_graph_description_parser.py	/^    SLASH = "SLASH"$/;"	v	class:LexTypes
STRLITERAL	./amr_graph_description_parser.py	/^    STRLITERAL = "STRLITERAL"$/;"	v	class:LexTypes
STRLITERAL	./graph_description_parser.py	/^    STRLITERAL = "STRLITERAL"$/;"	v	class:LexTypes
SentenceWithHgraph	./amr_corpus_reader.py	/^class SentenceWithHgraph(): $/;"	c
SpecialValue	./amr_graph_description_parser.py	/^from hgraph import Hgraph, SpecialValue, StrLiteral, Quantity, Literal, NonterminalLabel$/;"	i
SpecialValue	./graph_description_parser.py	/^from hgraph import Hgraph, SpecialValue, StrLiteral, Quantity, Literal$/;"	i
SpecialValue	./hgraph.py	/^class SpecialValue(str):$/;"	c
StrLiteral	./amr_graph_description_parser.py	/^from hgraph import Hgraph, SpecialValue, StrLiteral, Quantity, Literal, NonterminalLabel$/;"	i
StrLiteral	./graph_description_parser.py	/^from hgraph import Hgraph, SpecialValue, StrLiteral, Quantity, Literal$/;"	i
StrLiteral	./hgraph.py	/^class StrLiteral(str):$/;"	c
__eq__	./hgraph.py	/^    def __eq__(self, other):$/;"	m	class:Hgraph	file:
__getitem__	./hgraph.py	/^    def __getitem__(self, k):$/;"	m	class:ListMap	file:
__hash__	./hgraph.py	/^    def __hash__(self):$/;"	m	class:Hgraph	file:
__init__	./amr_corpus_reader.py	/^    def __init__(self, sent_id, sent_no, amr, tagged, ptb = None, edge_alignments = None, metadata = None):$/;"	m	class:SentenceWithHgraph
__init__	./amr_graph_description_parser.py	/^    def __init__(self):$/;"	m	class:GraphDescriptionParser
__init__	./amr_graph_description_parser.py	/^    def __init__(self, rules):$/;"	m	class:Lexer
__init__	./graph_description_parser.py	/^    def __init__(self):$/;"	m	class:GraphDescriptionParser
__init__	./graph_description_parser.py	/^    def __init__(self, rules):$/;"	m	class:Lexer
__init__	./hgraph.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Hgraph
__init__	./hgraph.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:ListMap
__reduce__	./hgraph.py	/^    def __reduce__(self):$/;"	m	class:Hgraph	file:
__reduce__	./hgraph.py	/^    def __reduce__(self):$/;"	m	class:ListMap	file:
__repr__	./hgraph.py	/^    def __repr__(self):$/;"	m	class:Literal	file:
__repr__	./hgraph.py	/^    def __repr__(self):$/;"	m	class:StrLiteral	file:
__setitem__	./hgraph.py	/^    def __setitem__(self, k, v):$/;"	m	class:ListMap	file:
__str__	./hgraph.py	/^    def __str__(self):$/;"	m	class:Hgraph	file:
__str__	./hgraph.py	/^    def __str__(self):$/;"	m	class:Literal	file:
__str__	./hgraph.py	/^    def __str__(self):$/;"	m	class:StrLiteral	file:
_add_triple	./hgraph.py	/^    def _add_triple(self, parent, relation, child, warn=sys.stderr):$/;"	m	class:Hgraph
_get_canonical_nodes	./hgraph.py	/^    def _get_canonical_nodes(self, prefix = ""):$/;"	m	class:Hgraph
_get_gv_graph	./hgraph.py	/^    def _get_gv_graph(self, instances = True):$/;"	m	class:Hgraph
_get_node_hashes	./hgraph.py	/^    def _get_node_hashes(self):$/;"	m	class:Hgraph
_graphics	./hgraph.py	/^_graphics = False$/;"	v
_parser_singleton	./hgraph.py	/^    _parser_singleton = None$/;"	v	class:Hgraph
_remove_triple	./hgraph.py	/^    def _remove_triple(self, parent, relation, child):$/;"	m	class:Hgraph
_replace_triple	./hgraph.py	/^    def _replace_triple(self, parent1, relation1, child1, parent2, relation2, child2, warn=sys.stderr):$/;"	m	class:Hgraph
_set_concept	./hgraph.py	/^    def _set_concept(self, node, concept):$/;"	m	class:Hgraph
a	./amr_corpus_reader.py	/^    a = metadata_amr_corpus(in_f)$/;"	v
aligned_corpus	./amr_corpus_reader.py	/^def aligned_corpus(f):$/;"	f
aligned_corpus	./make_one_amr_per_line.py	/^def aligned_corpus(f):$/;"	f
amr_graph_description_parser	./amr_corpus_reader.py	/^import amr_graph_description_parser$/;"	i
append	./hgraph.py	/^    def append(self, k, v):$/;"	m	class:ListMap
apply_node_map	./hgraph.py	/^    def apply_node_map(self, node_map, warn=False):$/;"	m	class:Hgraph
chatter	./log.py	/^def chatter(*message):$/;"	f
clone	./hgraph.py	/^    def clone(self, warn=sys.stderr):$/;"	m	class:Hgraph
clone_canonical	./hgraph.py	/^    def clone_canonical(self, external_dict = {}, prefix = "", warn=False):$/;"	m	class:Hgraph
collapse_fragment	./hgraph.py	/^    def collapse_fragment(self, dag, label = None, unary = False, warn=False):$/;"	m	class:Hgraph
colored	./log.py	/^from lib.termcolor import colored$/;"	i
combiner	./hgraph.py	/^        def combiner(nodestr, childmap, depth):$/;"	f	function:Hgraph.__str__
combiner	./hgraph.py	/^        def combiner(nodestr, childmap, depth):$/;"	f	function:Hgraph.to_amr_string
compute_fw_table	./hgraph.py	/^    def compute_fw_table(self):$/;"	m	class:Hgraph
compute_score	./new_smatch.py	/^def compute_score(triples1, triples2):$/;"	f
compute_score_and_matching_vars	./new_smatch.py	/^def compute_score_and_matching_vars(amr1, t2, mapping):$/;"	f
compute_smatch_batch	./new_smatch.py	/^def compute_smatch_batch(gold_filename, test_filename, starts, method ,$/;"	f
compute_smatch_hill_climbing	./new_smatch.py	/^def compute_smatch_hill_climbing(amr1in, amr2in, starts = 10, method = get_random_start, restart_threshold = 1.0):       $/;"	f
compute_smatch_precise	./new_smatch.py	/^def compute_smatch_precise(amr1, amr2):$/;"	f
conv	./hgraph.py	/^        def conv(node): # Closure over new_amr$/;"	f	function:Hgraph.stringify
conv	./hgraph.py	/^def conv(s):$/;"	f
copy	./hgraph.py	/^import copy$/;"	i
copy	./new_smatch.py	/^import copy$/;"	i
ddict	./amr_corpus_reader.py	/^from collections import defaultdict as ddict$/;"	i
ddict	./make_one_amr_per_line.py	/^from collections import defaultdict as ddict$/;"	i
debug	./log.py	/^def debug(*message):$/;"	f
defaultdict	./amr_graph_description_parser.py	/^from collections import defaultdict$/;"	i
defaultdict	./graph_description_parser.py	/^from collections import defaultdict$/;"	i
defaultdict	./hgraph.py	/^from collections import defaultdict$/;"	i
defaultdict	./new_smatch.py	/^from collections import defaultdict$/;"	i
dfs	./hgraph.py	/^            childmap, depth: {par: childmap.items()}, hedge_combiner = lambda x: tuple(x)):$/;"	m	class:Hgraph
doctest	./graph_description_parser.py	/^    import doctest$/;"	i
doctest	./hgraph.py	/^    import doctest$/;"	i
err	./log.py	/^def err(*message):$/;"	f
extractor	./hgraph.py	/^        def extractor(node, firsthit, leaf):$/;"	f	function:Hgraph.__str__
extractor	./hgraph.py	/^        def extractor(node, firsthit, leaf):$/;"	f	function:Hgraph.to_amr_string
find_external_nodes	./hgraph.py	/^    def find_external_nodes(self, dag):$/;"	m	class:Hgraph
find_leaves	./hgraph.py	/^    def find_leaves(self):$/;"	m	class:Hgraph
find_nt_edge	./hgraph.py	/^    def find_nt_edge(self, label, index):$/;"	m	class:Hgraph
find_roots	./hgraph.py	/^    def find_roots(self, warn=sys.stderr):$/;"	m	class:Hgraph
format_alignments	./amr_corpus_reader.py	/^def format_alignments(l, amr):$/;"	f
format_amr	./amr_corpus_reader.py	/^def format_amr(l):$/;"	f
format_amr	./make_one_amr_per_line.py	/^def format_amr(l):$/;"	f
format_constituents	./amr_corpus_reader.py	/^def format_constituents(l):$/;"	f
format_tagged	./amr_corpus_reader.py	/^def format_tagged(s):$/;"	f
format_text	./amr_corpus_reader.py	/^def format_text(l):$/;"	f
from_concept_edge_labels	./hgraph.py	/^    def from_concept_edge_labels(cls, amr):$/;"	m	class:Hgraph
from_string	./hgraph.py	/^    def from_string(cls, amr_string):$/;"	m	class:Hgraph
from_triples	./hgraph.py	/^    def from_triples(cls, triples, concepts, roots=None, warn=sys.stderr):$/;"	m	class:Hgraph
get_all_depths	./hgraph.py	/^    def get_all_depths(self):$/;"	m	class:Hgraph
get_all_in_edges	./hgraph.py	/^    def get_all_in_edges(self, nodelabels = False):$/;"	m	class:Hgraph
get_concept	./hgraph.py	/^    def get_concept(self, node):$/;"	m	class:Hgraph
get_concept_match_start	./new_smatch.py	/^def get_concept_match_start(amr1, amr2):$/;"	f
get_depth	./hgraph.py	/^    def get_depth(self, triple):$/;"	m	class:Hgraph
get_dot	./hgraph.py	/^    def get_dot(self, instances = True):$/;"	m	class:Hgraph
get_external_nodes	./hgraph.py	/^    def get_external_nodes(self):$/;"	m	class:Hgraph
get_mappings	./new_smatch.py	/^def get_mappings(l2, l1):$/;"	f
get_nodes	./hgraph.py	/^    def get_nodes(self):$/;"	m	class:Hgraph
get_ordered_nodes	./hgraph.py	/^    def get_ordered_nodes(self):$/;"	m	class:Hgraph
get_parallel_start	./new_smatch.py	/^def get_parallel_start(amr1, amr2):       $/;"	f
get_random_start	./new_smatch.py	/^def get_random_start(l2,l1):$/;"	f
get_reentrant_nodes	./hgraph.py	/^    def get_reentrant_nodes(self):$/;"	m	class:Hgraph
get_root_align_start	./new_smatch.py	/^def get_root_align_start(amr1, amr2):$/;"	f
get_smatch_triples	./new_smatch.py	/^def get_smatch_triples(amr):$/;"	f
get_terminals_and_nonterminals	./hgraph.py	/^    def get_terminals_and_nonterminals(self, nodelabels = False):$/;"	m	class:Hgraph
get_weakly_connected_roots	./hgraph.py	/^    def get_weakly_connected_roots(self, warn=sys.stderr):$/;"	m	class:Hgraph
getall	./hgraph.py	/^    def getall(self, k):$/;"	m	class:ListMap
graph_yield	./hgraph.py	/^    def graph_yield(self):$/;"	m	class:Hgraph
has_edge	./hgraph.py	/^    def has_edge(self, par, rel, child):$/;"	m	class:Hgraph
has_triple	./hgraph.py	/^    def has_triple(self, parent, relation, child):$/;"	m	class:Hgraph
hedgecombiner	./hgraph.py	/^        def hedgecombiner(nodes):$/;"	f	function:Hgraph.__str__
hedgecombiner	./hgraph.py	/^        def hedgecombiner(nodes):$/;"	f	function:Hgraph.to_amr_string
in_edges	./hgraph.py	/^    def in_edges(self, node, nodelabels = False):$/;"	m	class:Hgraph
in_f	./amr_corpus_reader.py	/^    in_f =  open(sys.argv[1],'r')$/;"	v
in_f	./make_one_amr_per_line.py	/^        in_f = open(sys.argv[1],'r')$/;"	v
info	./log.py	/^def info(*message):$/;"	f
insert_node	./graph_description_parser.py	/^        def insert_node(node, root=False):$/;"	f	function:GraphDescriptionParser.parse_string
is_connected	./hgraph.py	/^    def is_connected(self, warn=sys.stderr):$/;"	m	class:Hgraph
itemgetter	./hgraph.py	/^from operator import itemgetter$/;"	i
items	./hgraph.py	/^    def items(self):$/;"	m	class:ListMap
itemsfor	./hgraph.py	/^    def itemsfor(self, k):$/;"	m	class:ListMap
itertools	./new_smatch.py	/^import itertools$/;"	i
lex	./amr_graph_description_parser.py	/^    def lex(self, s):$/;"	m	class:Lexer
lex	./graph_description_parser.py	/^    def lex(self, s):$/;"	m	class:Lexer
log	./graph_description_parser.py	/^from common import log$/;"	i
main	./new_smatch.py	/^def main():$/;"	f
make_compiled_regex	./amr_graph_description_parser.py	/^    def make_compiled_regex(self, rules):$/;"	m	class:Lexer
make_compiled_regex	./graph_description_parser.py	/^    def make_compiled_regex(self, rules):$/;"	m	class:Lexer
map_triples	./new_smatch.py	/^def map_triples(triples, map):$/;"	f
math	./new_smatch.py	/^import math$/;"	i
mean	./new_smatch.py	/^def mean(l, emptylines = 0):$/;"	f
metadata_amr_corpus	./amr_corpus_reader.py	/^def metadata_amr_corpus(f):$/;"	f
nltk	./make_one_amr_per_line.py	/^import nltk.tree$/;"	i
nonterminal_edges	./hgraph.py	/^    def nonterminal_edges(self):$/;"	m	class:Hgraph
out_edges	./hgraph.py	/^    def out_edges(self, node, nodelabels = False):$/;"	m	class:Hgraph
parse_node	./graph_description_parser.py	/^    def parse_node(self, token):$/;"	m	class:GraphDescriptionParser
parse_string	./amr_graph_description_parser.py	/^    def parse_string(self, s, concepts = True):$/;"	m	class:GraphDescriptionParser
parse_string	./graph_description_parser.py	/^    def parse_string(self, s, concepts = True):$/;"	m	class:GraphDescriptionParser
parser	./amr_graph_description_parser.py	/^    parser = GraphDescriptionParser()$/;"	v	class:GraphDescriptionParser
parser	./graph_description_parser.py	/^    parser = GraphDescriptionParser()$/;"	v	class:GraphDescriptionParser
pe	./log.py	/^def pe(parts, color=None):$/;"	f
pgv	./hgraph.py	/^    import pygraphviz as pgv$/;"	i
plain_corpus	./amr_corpus_reader.py	/^def plain_corpus(f):$/;"	f
plain_corpus	./make_one_amr_per_line.py	/^def plain_corpus(f):$/;"	f
pop_and_transition	./graph_description_parser.py	/^        def pop_and_transition():$/;"	f	function:GraphDescriptionParser.parse_string
print_amr_error	./hgraph.py	/^def print_amr_error(amr_str, warn=sys.stderr):$/;"	f
pyparsing	./new_smatch.py	/^from lib import pyparsing$/;"	i
random	./new_smatch.py	/^import random$/;"	i
re	./amr_corpus_reader.py	/^import re$/;"	i
re	./amr_graph_description_parser.py	/^import re$/;"	i
re	./graph_description_parser.py	/^import re$/;"	i
re	./hgraph.py	/^import re$/;"	i
re	./make_one_amr_per_line.py	/^import re$/;"	i
reach	./hgraph.py	/^    def reach(self, node):$/;"	m	class:Hgraph
read_to_empty	./amr_corpus_reader.py	/^def read_to_empty(f):$/;"	f
read_to_empty	./make_one_amr_per_line.py	/^def read_to_empty(f):$/;"	f
rec_step	./hgraph.py	/^        def rec_step(node, depth):$/;"	f	function:Hgraph.dfs
rec_step	./hgraph.py	/^        def rec_step(node, depth):$/;"	f	function:Hgraph.graph_yield
remove	./hgraph.py	/^    def remove(self, k, v):$/;"	m	class:ListMap
remove_fragment	./hgraph.py	/^    def remove_fragment(self, dag):$/;"	m	class:Hgraph
render	./hgraph.py	/^    def render(self, instances = True):$/;"	m	class:Hgraph
render_to_file	./hgraph.py	/^    def render_to_file(self, file_or_name, instances = True, *args, **kwargs):$/;"	m	class:Hgraph
replace	./hgraph.py	/^    def replace(self, k, v):$/;"	m	class:ListMap
replace_fragment	./hgraph.py	/^    def replace_fragment(self, dag, new_dag, partial_boundary_map = {}, warn=False):$/;"	m	class:Hgraph
require_graphics	./hgraph.py	/^def require_graphics():$/;"	f
star	./hgraph.py	/^    def star(self, node):$/;"	m	class:Hgraph
string	./amr_corpus_reader.py	/^import string$/;"	i
string	./make_one_amr_per_line.py	/^import string$/;"	i
stringify	./hgraph.py	/^    def stringify(self, warn=False):$/;"	m	class:Hgraph
sys	./amr_corpus_reader.py	/^import sys$/;"	i
sys	./amr_graph_description_parser.py	/^import sys$/;"	i
sys	./graph_description_parser.py	/^import sys$/;"	i
sys	./hgraph.py	/^import sys$/;"	i
sys	./log.py	/^import sys$/;"	i
sys	./make_one_amr_per_line.py	/^import sys$/;"	i
sys	./new_smatch.py	/^import sys$/;"	i
textlinematcher	./amr_corpus_reader.py	/^textlinematcher = re.compile("^(\\d+)\\.(.*?)\\((.*)\\)?$")$/;"	v
timeit	./new_smatch.py	/^import timeit$/;"	i
to_amr_string	./hgraph.py	/^    def to_amr_string(self):$/;"	m	class:Hgraph
to_concept_edge_labels	./hgraph.py	/^    def to_concept_edge_labels(self, warn=False):$/;"	m	class:Hgraph
to_string	./hgraph.py	/^    def to_string(self, newline = False):$/;"	m	class:Hgraph
tree	./make_one_amr_per_line.py	/^import nltk.tree$/;"	i
triples	./hgraph.py	/^    def triples(self, instances =  False, start_node = None, refresh = False, nodelabels = False):$/;"	m	class:Hgraph
ulf_corpus	./amr_corpus_reader.py	/^def ulf_corpus(f):$/;"	f
unittest	./amr_graph_description_parser.py	/^import unittest$/;"	i
unittest	./hgraph.py	/^import unittest$/;"	i
values	./hgraph.py	/^    def values(self):$/;"	m	class:ListMap
warn	./log.py	/^def warn(*message):$/;"	f
xdot	./hgraph.py	/^    import xdot$/;"	i
